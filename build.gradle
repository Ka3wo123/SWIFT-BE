plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'pl.ka3wo'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    compileOnly 'org.projectlombok:lombok:1.18.36'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers:3.4.4'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.6'
    testImplementation 'org.testcontainers:mongodb:1.20.6'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
}

def testSummary = { Test testTask ->
    testTask.useJUnitPlatform()
    testTask.outputs.upToDateWhen { false }
    testTask.testLogging {
        events = ["passed", "skipped", "failed"]
        exceptionFormat = "full"
        showStandardStreams = true
    }
    testTask.afterSuite { desc, result ->
        if (!desc.parent) {
            println("Summary: ${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
        }
    }
}

test {
    testSummary(delegate)
}

tasks.register('utest', Test) {
    description = 'Runs all unit tests.'
    group = 'verification'
    exclude '**/integration/**'
    testSummary(delegate)
}

tasks.register('itest', Test) {
    description = 'Runs all integration tests.'
    group = 'verification'
    include '**/integration/*IT.class'
    testSummary(delegate)
}

